{"version":3,"file":"index.mjs","sources":["../lib/truncsd.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar log10 = require( '@stdlib/math-base-special-log10' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar exponent = require( '@stdlib/number-float64-base-exponent' );\nvar trunc = require( '@stdlib/math-base-special-trunc' );\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest number toward zero with \\\\(n\\\\) significant figures.\n*\n* @param {number} x - input value\n* @param {PositiveInteger} n - number of significant figures\n* @param {PositiveInteger} [b=10] - base\n* @returns {number} rounded value\n*\n* @example\n* var v = truncsd( 3.141592653589793, 5 );\n* // returns 3.1415\n*\n* @example\n* var v = truncsd( 3.141592653589793, 1 );\n* // returns 3.0\n*\n* @example\n* var v = truncsd( 12368.0, 2 );\n* // returns 12000.0\n*\n* @example\n* var v = truncsd( 0.0313, 2, 2 );\n* // returns 0.03125\n*/\nfunction truncsd( x, n, b ) {\n\tvar base;\n\tvar exp;\n\tvar s;\n\tvar y;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tn < 1 ||\n\t\tisInfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif (\n\t\t\tisnan( b ) ||\n\t\t\tb <= 0 ||\n\t\t\tisInfinite( b )\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\tbase = b;\n\t} else {\n\t\tbase = 10;\n\t}\n\tif ( isInfinite( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( base === 10 ) {\n\t\texp = log10( abs( x ) );\n\t}\n\telse if ( base === 2 ) {\n\t\texp = exponent( abs( x ) );\n\t}\n\telse {\n\t\texp = ln( abs(x) ) / ln( base );\n\t}\n\texp = floor( exp - n + 1.0 );\n\ts = pow( base, abs( exp ) );\n\n\t// Check for overflow:\n\tif ( isInfinite( s ) ) {\n\t\treturn x;\n\t}\n\t// To avoid numerical stability issues due to floating-point rounding error (e.g., 3.55/0.1-35.5 = -7.105427357601e-15 and 3.55*10-35.5 = 0), we must treat positive and negative exponents separately.\n\tif ( exp < 0 ) {\n\t\ty = trunc( x * s ) / s;\n\t} else {\n\t\ty = trunc( x / s ) * s;\n\t}\n\t// Check for overflow:\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = truncsd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Round a numeric value to the nearest number toward zero with `n` significant figures.\n*\n* @module @stdlib/math-base-special-truncsd\n*\n* @example\n* var truncsd = require( '@stdlib/math-base-special-truncsd' );\n*\n* var v = truncsd( 3.141592653589793, 5 );\n* // returns 3.1415\n*\n* v = truncsd( 3.141592653589793, 1 );\n* // returns 3.0\n*\n* v = truncsd( 12368.0, 2 );\n* // returns 12000.0\n*\n* v = truncsd( 0.0313, 2, 2 )\n* // returns 0.03125\n*/\n\n// MODULES //\n\nvar truncsd = require( './truncsd.js' );\n\n\n// EXPORTS //\n\nmodule.exports = truncsd;\n"],"names":["isnan","require$$0","isInfinite","require$$1","pow","require$$2","log10","require$$3","ln","require$$4","abs","require$$5","floor","require$$6","exponent","require$$7","trunc","require$$8","lib","x","n","b","base","exp","s","y","NaN","arguments","length"],"mappings":";;szBAsBA,IAAIA,EAAQC,EACRC,EAAaC,EACbC,EAAMC,EACNC,EAAQC,EACRC,EAAKC,EACLC,EAAMC,EACNC,EAAQC,EACRC,EAAWC,EACXC,EAAQC,EAyFZ,ICvEAC,EDWA,SAAkBC,EAAGC,EAAGC,GACvB,IAAIC,EACAC,EACAC,EACAC,EACJ,GACCzB,EAAOmB,IACPnB,EAAOoB,IACPA,EAAI,GACJlB,EAAYkB,GAEZ,OAAOM,IAER,GAAKC,UAAUC,OAAS,EAAI,CAC3B,GACC5B,EAAOqB,IACPA,GAAK,GACLnB,EAAYmB,GAEZ,OAAOK,IAERJ,EAAOD,OAEPC,EAAO,GAER,OAAKpB,EAAYiB,IAAa,IAANA,EAChBA,GAGPI,EADa,KAATD,EACEhB,EAAOI,EAAKS,IAEA,IAATG,EACHR,EAAUJ,EAAKS,IAGfX,EAAIE,EAAIS,IAAOX,EAAIc,GAE1BC,EAAMX,EAAOW,EAAMH,EAAI,GACvBI,EAAIpB,EAAKkB,EAAMZ,EAAKa,IAGfrB,EAAYsB,GACTL,GAIPM,EADIF,EAAM,EACNP,EAAOG,EAAIK,GAAMA,EAEjBR,EAAOG,EAAIK,GAAMA,EAGjBtB,EAAYuB,GACTN,EAEDM"}